Terminals unused in grammar

    TK_PR_THEN
    TK_PR_FOREACH
    TK_PR_SWITCH
    TK_PR_CASE
    TK_PR_CLASS
    TK_PR_PRIVATE
    TK_PR_PUBLIC
    TK_PR_PROTECTED
    TK_PR_END
    TK_PR_DEFAULT
    TOKEN_ERRO


State 17 conflicts: 4 shift/reduce
State 26 conflicts: 3 shift/reduce
State 34 conflicts: 3 shift/reduce
State 51 conflicts: 14 reduce/reduce
State 53 conflicts: 6 reduce/reduce
State 65 conflicts: 4 shift/reduce, 1 reduce/reduce
State 79 conflicts: 3 shift/reduce
State 80 conflicts: 3 shift/reduce
State 94 conflicts: 1 shift/reduce
State 96 conflicts: 3 shift/reduce
State 99 conflicts: 3 shift/reduce
State 111 conflicts: 3 shift/reduce
State 112 conflicts: 4 shift/reduce
State 113 conflicts: 3 shift/reduce
State 116 conflicts: 4 shift/reduce, 1 reduce/reduce
State 117 conflicts: 3 shift/reduce
State 118 conflicts: 3 shift/reduce
State 119 conflicts: 3 shift/reduce
State 126 conflicts: 4 shift/reduce
State 127 conflicts: 4 shift/reduce
State 128 conflicts: 4 shift/reduce
State 129 conflicts: 4 shift/reduce
State 142 conflicts: 3 shift/reduce
State 183 conflicts: 3 shift/reduce
State 184 conflicts: 3 shift/reduce
State 188 conflicts: 3 shift/reduce
State 190 conflicts: 3 shift/reduce
State 200 conflicts: 3 shift/reduce


Grammar

    0 $accept: programa $end

    1 programa: multiple_declarations

    2 multiple_declarations: declaration multiple_declarations
    3                      | %empty

    4 declaration: global_variable_body
    5            | function

    6 global_variable_body: static type id vector_declaration global_fotter ';'

    7 global_fotter: ',' id vector_declaration global_fotter
    8              | %empty

    9 vector_declaration: '[' TK_LIT_INT ']'
   10                   | %empty

   11 static: TK_PR_STATIC
   12       | %empty

   13 id: TK_IDENTIFICADOR

   14 function: func_header func_body

   15 func_header: static type id list

   16 list: '(' parameters ')'

   17 parameters: const type id ',' parameters
   18           | const type id
   19           | %empty

   20 const: TK_PR_CONST
   21      | %empty

   22 func_body: command_block

   23 command_block: '{' command '}'

   24 command: simple_command ';'
   25        | simple_command ';' command
   26        | flux_control
   27        | flux_control command
   28        | %empty

   29 simple_command: local_variable
   30               | attribution
   31               | input
   32               | output
   33               | return
   34               | command_block
   35               | shift
   36               | break
   37               | continue
   38               | ternary
   39               | func_call

   40 local_variable: static const type id_list

   41 id_list: id initialization
   42        | id initialization ',' id_list

   43 initialization: TK_OC_LE id
   44               | TK_OC_LE literal
   45               | %empty

   46 literal: TK_LIT_INT
   47        | TK_LIT_FLOAT
   48        | TK_LIT_FALSE
   49        | TK_LIT_TRUE
   50        | TK_LIT_CHAR
   51        | TK_LIT_STRING

   52 attribution: id '=' expr
   53            | id '[' expr ']' '=' expr

   54 ternary: expr '?' expr ':' expr

   55 expr: arit
   56     | log

   57 operand_arit: id vector_expr
   58             | TK_LIT_INT
   59             | TK_LIT_FLOAT
   60             | func_call

   61 operand_log: operand_arit
   62            | TK_LIT_TRUE
   63            | TK_LIT_FALSE

   64 arit: arit '|' bitwise
   65     | arit '&' bitwise
   66     | bitwise

   67 bitwise: bitwise '+' sum_and_sub
   68        | bitwise '-' sum_and_sub
   69        | sum_and_sub
   70        | %empty

   71 sum_and_sub: sum_and_sub '*' mult_and_div
   72            | sum_and_sub '/' mult_and_div
   73            | sum_and_sub '%' mult_and_div
   74            | mult_and_div

   75 mult_and_div: mult_and_div '^' exponential
   76             | exponential

   77 exponential: '+' exponential
   78            | '-' exponential
   79            | '*' exponential
   80            | '&' exponential
   81            | '#' exponential
   82            | unary

   83 unary: '(' arit ')'
   84      | operand_arit

   85 log: log TK_OC_OR or
   86    | or

   87 or: or TK_OC_AND and
   88   | and

   89 and: and TK_OC_EQ eq_neq
   90    | and TK_OC_NE eq_neq
   91    | eq_neq

   92 eq_neq: eq_neq TK_OC_LE leq_geq
   93       | eq_neq TK_OC_GE leq_geq
   94       | eq_neq '>' leq_geq
   95       | eq_neq '<' leq_geq
   96       | arit
   97       | leq_geq

   98 leq_geq: '?' leq_geq
   99        | '!' leq_geq
  100        | not

  101 not: operand_log
  102    | '(' log ')'

  103 vector_expr: '[' expr ']'
  104            | %empty

  105 flux_control: conditional
  106             | iterative

  107 conditional: TK_PR_IF '(' expr ')' command_block
  108            | TK_PR_IF '(' expr ')' command_block TK_PR_ELSE command_block

  109 iterative: TK_PR_FOR '(' attribution ':' expr ':' attribution ')' command_block
  110          | TK_PR_WHILE '(' expr ')' TK_PR_DO command_block

  111 input: TK_PR_INPUT id

  112 output: TK_PR_OUTPUT id
  113       | TK_PR_OUTPUT literal

  114 return: TK_PR_RETURN expr

  115 break: TK_PR_BREAK

  116 continue: TK_PR_CONTINUE

  117 shift: id TK_OC_SL TK_LIT_INT
  118      | id TK_OC_SR TK_LIT_INT

  119 func_call: id '(' args ')'
  120          | id '(' ')'

  121 args: expr
  122     | args ',' expr

  123 type: TK_PR_INT
  124     | TK_PR_FLOAT
  125     | TK_PR_BOOL
  126     | TK_PR_CHAR
  127     | TK_PR_STRING


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 99
    '#' (35) 81
    '%' (37) 73
    '&' (38) 65 80
    '(' (40) 16 83 102 107 108 109 110 119 120
    ')' (41) 16 83 102 107 108 109 110 119 120
    '*' (42) 71 79
    '+' (43) 67 77
    ',' (44) 7 17 42 122
    '-' (45) 68 78
    '/' (47) 72
    ':' (58) 54 109
    ';' (59) 6 24 25
    '<' (60) 95
    '=' (61) 52 53
    '>' (62) 94
    '?' (63) 54 98
    '[' (91) 9 53 103
    ']' (93) 9 53 103
    '^' (94) 75
    '{' (123) 23
    '|' (124) 64
    '}' (125) 23
    error (256)
    TK_PR_INT (258) 123
    TK_PR_FLOAT (259) 124
    TK_PR_BOOL (260) 125
    TK_PR_CHAR (261) 126
    TK_PR_STRING (262) 127
    TK_PR_IF (263) 107 108
    TK_PR_THEN (264)
    TK_PR_ELSE (265) 108
    TK_PR_WHILE (266) 110
    TK_PR_DO (267) 110
    TK_PR_INPUT (268) 111
    TK_PR_OUTPUT (269) 112 113
    TK_PR_RETURN (270) 114
    TK_PR_CONST (271) 20
    TK_PR_STATIC (272) 11
    TK_PR_FOREACH (273)
    TK_PR_FOR (274) 109
    TK_PR_SWITCH (275)
    TK_PR_CASE (276)
    TK_PR_BREAK (277) 115
    TK_PR_CONTINUE (278) 116
    TK_PR_CLASS (279)
    TK_PR_PRIVATE (280)
    TK_PR_PUBLIC (281)
    TK_PR_PROTECTED (282)
    TK_PR_END (283)
    TK_PR_DEFAULT (284)
    TK_OC_LE (285) 43 44 92
    TK_OC_GE (286) 93
    TK_OC_EQ (287) 89
    TK_OC_NE (288) 90
    TK_OC_AND (289) 87
    TK_OC_OR (290) 85
    TK_OC_SL (291) 117
    TK_OC_SR (292) 118
    TK_LIT_INT (293) 9 46 58 117 118
    TK_LIT_FLOAT (294) 47 59
    TK_LIT_FALSE (295) 48 63
    TK_LIT_TRUE (296) 49 62
    TK_LIT_CHAR (297) 50
    TK_LIT_STRING (298) 51
    TK_IDENTIFICADOR (299) 13
    TOKEN_ERRO (300)


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    programa (70)
        on left: 1
        on right: 0
    multiple_declarations (71)
        on left: 2 3
        on right: 1 2
    declaration (72)
        on left: 4 5
        on right: 2
    global_variable_body (73)
        on left: 6
        on right: 4
    global_fotter (74)
        on left: 7 8
        on right: 6 7
    vector_declaration (75)
        on left: 9 10
        on right: 6 7
    static (76)
        on left: 11 12
        on right: 6 15 40
    id (77)
        on left: 13
        on right: 6 7 15 17 18 41 42 43 52 53 57 111 112 117 118 119 120
    function (78)
        on left: 14
        on right: 5
    func_header (79)
        on left: 15
        on right: 14
    list (80)
        on left: 16
        on right: 15
    parameters (81)
        on left: 17 18 19
        on right: 16 17
    const (82)
        on left: 20 21
        on right: 17 18 40
    func_body (83)
        on left: 22
        on right: 14
    command_block (84)
        on left: 23
        on right: 22 34 107 108 109 110
    command (85)
        on left: 24 25 26 27 28
        on right: 23 25 27
    simple_command (86)
        on left: 29 30 31 32 33 34 35 36 37 38 39
        on right: 24 25
    local_variable (87)
        on left: 40
        on right: 29
    id_list (88)
        on left: 41 42
        on right: 40 42
    initialization (89)
        on left: 43 44 45
        on right: 41 42
    literal (90)
        on left: 46 47 48 49 50 51
        on right: 44 113
    attribution (91)
        on left: 52 53
        on right: 30 109
    ternary (92)
        on left: 54
        on right: 38
    expr (93)
        on left: 55 56
        on right: 52 53 54 103 107 108 109 110 114 121 122
    operand_arit (94)
        on left: 57 58 59 60
        on right: 61 84
    operand_log (95)
        on left: 61 62 63
        on right: 101
    arit (96)
        on left: 64 65 66
        on right: 55 64 65 83 96
    bitwise (97)
        on left: 67 68 69 70
        on right: 64 65 66 67 68
    sum_and_sub (98)
        on left: 71 72 73 74
        on right: 67 68 69 71 72 73
    mult_and_div (99)
        on left: 75 76
        on right: 71 72 73 74 75
    exponential (100)
        on left: 77 78 79 80 81 82
        on right: 75 76 77 78 79 80 81
    unary (101)
        on left: 83 84
        on right: 82
    log (102)
        on left: 85 86
        on right: 56 85 102
    or (103)
        on left: 87 88
        on right: 85 86 87
    and (104)
        on left: 89 90 91
        on right: 87 88 89 90
    eq_neq (105)
        on left: 92 93 94 95 96 97
        on right: 89 90 91 92 93 94 95
    leq_geq (106)
        on left: 98 99 100
        on right: 92 93 94 95 97 98 99
    not (107)
        on left: 101 102
        on right: 100
    vector_expr (108)
        on left: 103 104
        on right: 57
    flux_control (109)
        on left: 105 106
        on right: 26 27
    conditional (110)
        on left: 107 108
        on right: 105
    iterative (111)
        on left: 109 110
        on right: 106
    input (112)
        on left: 111
        on right: 31
    output (113)
        on left: 112 113
        on right: 32
    return (114)
        on left: 114
        on right: 33
    break (115)
        on left: 115
        on right: 36
    continue (116)
        on left: 116
        on right: 37
    shift (117)
        on left: 117 118
        on right: 35
    func_call (118)
        on left: 119 120
        on right: 39 60
    args (119)
        on left: 121 122
        on right: 119 122
    type (120)
        on left: 123 124 125 126 127
        on right: 6 15 17 18 40


State 0

    0 $accept: • programa $end

    TK_PR_STATIC  shift, and go to state 1

    $end      reduce using rule 3 (multiple_declarations)
    $default  reduce using rule 12 (static)

    programa               go to state 2
    multiple_declarations  go to state 3
    declaration            go to state 4
    global_variable_body   go to state 5
    static                 go to state 6
    function               go to state 7
    func_header            go to state 8


State 1

   11 static: TK_PR_STATIC •

    $default  reduce using rule 11 (static)


State 2

    0 $accept: programa • $end

    $end  shift, and go to state 9


State 3

    1 programa: multiple_declarations •

    $default  reduce using rule 1 (programa)


State 4

    2 multiple_declarations: declaration • multiple_declarations

    TK_PR_STATIC  shift, and go to state 1

    $end      reduce using rule 3 (multiple_declarations)
    $default  reduce using rule 12 (static)

    multiple_declarations  go to state 10
    declaration            go to state 4
    global_variable_body   go to state 5
    static                 go to state 6
    function               go to state 7
    func_header            go to state 8


State 5

    4 declaration: global_variable_body •

    $default  reduce using rule 4 (declaration)


State 6

    6 global_variable_body: static • type id vector_declaration global_fotter ';'
   15 func_header: static • type id list

    TK_PR_INT     shift, and go to state 11
    TK_PR_FLOAT   shift, and go to state 12
    TK_PR_BOOL    shift, and go to state 13
    TK_PR_CHAR    shift, and go to state 14
    TK_PR_STRING  shift, and go to state 15

    type  go to state 16


State 7

    5 declaration: function •

    $default  reduce using rule 5 (declaration)


State 8

   14 function: func_header • func_body

    '{'  shift, and go to state 17

    func_body      go to state 18
    command_block  go to state 19


State 9

    0 $accept: programa $end •

    $default  accept


State 10

    2 multiple_declarations: declaration multiple_declarations •

    $default  reduce using rule 2 (multiple_declarations)


State 11

  123 type: TK_PR_INT •

    $default  reduce using rule 123 (type)


State 12

  124 type: TK_PR_FLOAT •

    $default  reduce using rule 124 (type)


State 13

  125 type: TK_PR_BOOL •

    $default  reduce using rule 125 (type)


State 14

  126 type: TK_PR_CHAR •

    $default  reduce using rule 126 (type)


State 15

  127 type: TK_PR_STRING •

    $default  reduce using rule 127 (type)


State 16

    6 global_variable_body: static type • id vector_declaration global_fotter ';'
   15 func_header: static type • id list

    TK_IDENTIFICADOR  shift, and go to state 20

    id  go to state 21


State 17

   23 command_block: '{' • command '}'

    TK_PR_IF          shift, and go to state 22
    TK_PR_WHILE       shift, and go to state 23
    TK_PR_INPUT       shift, and go to state 24
    TK_PR_OUTPUT      shift, and go to state 25
    TK_PR_RETURN      shift, and go to state 26
    TK_PR_STATIC      shift, and go to state 1
    TK_PR_FOR         shift, and go to state 27
    TK_PR_BREAK       shift, and go to state 28
    TK_PR_CONTINUE    shift, and go to state 29
    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '{'               shift, and go to state 17
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    TK_PR_INT     reduce using rule 12 (static)
    TK_PR_FLOAT   reduce using rule 12 (static)
    TK_PR_BOOL    reduce using rule 12 (static)
    TK_PR_CHAR    reduce using rule 12 (static)
    TK_PR_STRING  reduce using rule 12 (static)
    TK_PR_CONST   reduce using rule 12 (static)
    '}'           reduce using rule 28 (command)
    '?'           [reduce using rule 70 (bitwise)]
    '&'           [reduce using rule 70 (bitwise)]
    '+'           [reduce using rule 70 (bitwise)]
    '-'           [reduce using rule 70 (bitwise)]
    $default      reduce using rule 70 (bitwise)

    static          go to state 42
    id              go to state 43
    command_block   go to state 44
    command         go to state 45
    simple_command  go to state 46
    local_variable  go to state 47
    attribution     go to state 48
    ternary         go to state 49
    expr            go to state 50
    operand_arit    go to state 51
    operand_log     go to state 52
    arit            go to state 53
    bitwise         go to state 54
    sum_and_sub     go to state 55
    mult_and_div    go to state 56
    exponential     go to state 57
    unary           go to state 58
    log             go to state 59
    or              go to state 60
    and             go to state 61
    eq_neq          go to state 62
    leq_geq         go to state 63
    not             go to state 64
    flux_control    go to state 65
    conditional     go to state 66
    iterative       go to state 67
    input           go to state 68
    output          go to state 69
    return          go to state 70
    break           go to state 71
    continue        go to state 72
    shift           go to state 73
    func_call       go to state 74


State 18

   14 function: func_header func_body •

    $default  reduce using rule 14 (function)


State 19

   22 func_body: command_block •

    $default  reduce using rule 22 (func_body)


State 20

   13 id: TK_IDENTIFICADOR •

    $default  reduce using rule 13 (id)


State 21

    6 global_variable_body: static type id • vector_declaration global_fotter ';'
   15 func_header: static type id • list

    '['  shift, and go to state 75
    '('  shift, and go to state 76

    $default  reduce using rule 10 (vector_declaration)

    vector_declaration  go to state 77
    list                go to state 78


State 22

  107 conditional: TK_PR_IF • '(' expr ')' command_block
  108            | TK_PR_IF • '(' expr ')' command_block TK_PR_ELSE command_block

    '('  shift, and go to state 79


State 23

  110 iterative: TK_PR_WHILE • '(' expr ')' TK_PR_DO command_block

    '('  shift, and go to state 80


State 24

  111 input: TK_PR_INPUT • id

    TK_IDENTIFICADOR  shift, and go to state 20

    id  go to state 81


State 25

  112 output: TK_PR_OUTPUT • id
  113       | TK_PR_OUTPUT • literal

    TK_LIT_INT        shift, and go to state 82
    TK_LIT_FLOAT      shift, and go to state 83
    TK_LIT_FALSE      shift, and go to state 84
    TK_LIT_TRUE       shift, and go to state 85
    TK_LIT_CHAR       shift, and go to state 86
    TK_LIT_STRING     shift, and go to state 87
    TK_IDENTIFICADOR  shift, and go to state 20

    id       go to state 88
    literal  go to state 89


State 26

  114 return: TK_PR_RETURN • expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 91
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 27

  109 iterative: TK_PR_FOR • '(' attribution ':' expr ':' attribution ')' command_block

    '('  shift, and go to state 93


State 28

  115 break: TK_PR_BREAK •

    $default  reduce using rule 115 (break)


State 29

  116 continue: TK_PR_CONTINUE •

    $default  reduce using rule 116 (continue)


State 30

   58 operand_arit: TK_LIT_INT •

    $default  reduce using rule 58 (operand_arit)


State 31

   59 operand_arit: TK_LIT_FLOAT •

    $default  reduce using rule 59 (operand_arit)


State 32

   63 operand_log: TK_LIT_FALSE •

    $default  reduce using rule 63 (operand_log)


State 33

   62 operand_log: TK_LIT_TRUE •

    $default  reduce using rule 62 (operand_log)


State 34

   83 unary: '(' • arit ')'
  102 not: '(' • log ')'

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 94
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 95
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 35

   98 leq_geq: '?' • leq_geq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 96
    '?'               shift, and go to state 35
    '!'               shift, and go to state 41

    id            go to state 90
    operand_arit  go to state 97
    operand_log   go to state 52
    leq_geq       go to state 98
    not           go to state 64
    func_call     go to state 92


State 36

   80 exponential: '&' • exponential

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    exponential   go to state 101
    unary         go to state 58
    func_call     go to state 92


State 37

   77 exponential: '+' • exponential

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    exponential   go to state 102
    unary         go to state 58
    func_call     go to state 92


State 38

   78 exponential: '-' • exponential

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    exponential   go to state 103
    unary         go to state 58
    func_call     go to state 92


State 39

   79 exponential: '*' • exponential

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    exponential   go to state 104
    unary         go to state 58
    func_call     go to state 92


State 40

   81 exponential: '#' • exponential

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    exponential   go to state 105
    unary         go to state 58
    func_call     go to state 92


State 41

   99 leq_geq: '!' • leq_geq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 96
    '?'               shift, and go to state 35
    '!'               shift, and go to state 41

    id            go to state 90
    operand_arit  go to state 97
    operand_log   go to state 52
    leq_geq       go to state 106
    not           go to state 64
    func_call     go to state 92


State 42

   40 local_variable: static • const type id_list

    TK_PR_CONST  shift, and go to state 107

    $default  reduce using rule 21 (const)

    const  go to state 108


State 43

   52 attribution: id • '=' expr
   53            | id • '[' expr ']' '=' expr
   57 operand_arit: id • vector_expr
  117 shift: id • TK_OC_SL TK_LIT_INT
  118      | id • TK_OC_SR TK_LIT_INT
  119 func_call: id • '(' args ')'
  120          | id • '(' ')'

    TK_OC_SL  shift, and go to state 109
    TK_OC_SR  shift, and go to state 110
    '['       shift, and go to state 111
    '('       shift, and go to state 112
    '='       shift, and go to state 113

    $default  reduce using rule 104 (vector_expr)

    vector_expr  go to state 114


State 44

   34 simple_command: command_block •

    $default  reduce using rule 34 (simple_command)


State 45

   23 command_block: '{' command • '}'

    '}'  shift, and go to state 115


State 46

   24 command: simple_command • ';'
   25        | simple_command • ';' command

    ';'  shift, and go to state 116


State 47

   29 simple_command: local_variable •

    $default  reduce using rule 29 (simple_command)


State 48

   30 simple_command: attribution •

    $default  reduce using rule 30 (simple_command)


State 49

   38 simple_command: ternary •

    $default  reduce using rule 38 (simple_command)


State 50

   54 ternary: expr • '?' expr ':' expr

    '?'  shift, and go to state 117


State 51

   61 operand_log: operand_arit •
   84 unary: operand_arit •

    TK_OC_LE   reduce using rule 61 (operand_log)
    TK_OC_LE   [reduce using rule 84 (unary)]
    TK_OC_GE   reduce using rule 61 (operand_log)
    TK_OC_GE   [reduce using rule 84 (unary)]
    TK_OC_EQ   reduce using rule 61 (operand_log)
    TK_OC_EQ   [reduce using rule 84 (unary)]
    TK_OC_NE   reduce using rule 61 (operand_log)
    TK_OC_NE   [reduce using rule 84 (unary)]
    TK_OC_AND  reduce using rule 61 (operand_log)
    TK_OC_AND  [reduce using rule 84 (unary)]
    TK_OC_OR   reduce using rule 61 (operand_log)
    TK_OC_OR   [reduce using rule 84 (unary)]
    ';'        reduce using rule 61 (operand_log)
    ';'        [reduce using rule 84 (unary)]
    ','        reduce using rule 61 (operand_log)
    ','        [reduce using rule 84 (unary)]
    ']'        reduce using rule 61 (operand_log)
    ']'        [reduce using rule 84 (unary)]
    ')'        reduce using rule 61 (operand_log)
    ')'        [reduce using rule 84 (unary)]
    '?'        reduce using rule 61 (operand_log)
    '?'        [reduce using rule 84 (unary)]
    ':'        reduce using rule 61 (operand_log)
    ':'        [reduce using rule 84 (unary)]
    '|'        reduce using rule 84 (unary)
    '&'        reduce using rule 84 (unary)
    '+'        reduce using rule 84 (unary)
    '-'        reduce using rule 84 (unary)
    '*'        reduce using rule 84 (unary)
    '/'        reduce using rule 84 (unary)
    '%'        reduce using rule 84 (unary)
    '^'        reduce using rule 84 (unary)
    '>'        reduce using rule 61 (operand_log)
    '>'        [reduce using rule 84 (unary)]
    '<'        reduce using rule 61 (operand_log)
    '<'        [reduce using rule 84 (unary)]
    $default   reduce using rule 61 (operand_log)


State 52

  101 not: operand_log •

    $default  reduce using rule 101 (not)


State 53

   55 expr: arit •
   64 arit: arit • '|' bitwise
   65     | arit • '&' bitwise
   96 eq_neq: arit •

    '|'  shift, and go to state 118
    '&'  shift, and go to state 119

    ';'       reduce using rule 55 (expr)
    ';'       [reduce using rule 96 (eq_neq)]
    ','       reduce using rule 55 (expr)
    ','       [reduce using rule 96 (eq_neq)]
    ']'       reduce using rule 55 (expr)
    ']'       [reduce using rule 96 (eq_neq)]
    ')'       reduce using rule 55 (expr)
    ')'       [reduce using rule 96 (eq_neq)]
    '?'       reduce using rule 55 (expr)
    '?'       [reduce using rule 96 (eq_neq)]
    ':'       reduce using rule 55 (expr)
    ':'       [reduce using rule 96 (eq_neq)]
    $default  reduce using rule 96 (eq_neq)


State 54

   66 arit: bitwise •
   67 bitwise: bitwise • '+' sum_and_sub
   68        | bitwise • '-' sum_and_sub

    '+'  shift, and go to state 120
    '-'  shift, and go to state 121

    $default  reduce using rule 66 (arit)


State 55

   69 bitwise: sum_and_sub •
   71 sum_and_sub: sum_and_sub • '*' mult_and_div
   72            | sum_and_sub • '/' mult_and_div
   73            | sum_and_sub • '%' mult_and_div

    '*'  shift, and go to state 122
    '/'  shift, and go to state 123
    '%'  shift, and go to state 124

    $default  reduce using rule 69 (bitwise)


State 56

   74 sum_and_sub: mult_and_div •
   75 mult_and_div: mult_and_div • '^' exponential

    '^'  shift, and go to state 125

    $default  reduce using rule 74 (sum_and_sub)


State 57

   76 mult_and_div: exponential •

    $default  reduce using rule 76 (mult_and_div)


State 58

   82 exponential: unary •

    $default  reduce using rule 82 (exponential)


State 59

   56 expr: log •
   85 log: log • TK_OC_OR or

    TK_OC_OR  shift, and go to state 126

    $default  reduce using rule 56 (expr)


State 60

   86 log: or •
   87 or: or • TK_OC_AND and

    TK_OC_AND  shift, and go to state 127

    $default  reduce using rule 86 (log)


State 61

   88 or: and •
   89 and: and • TK_OC_EQ eq_neq
   90    | and • TK_OC_NE eq_neq

    TK_OC_EQ  shift, and go to state 128
    TK_OC_NE  shift, and go to state 129

    $default  reduce using rule 88 (or)


State 62

   91 and: eq_neq •
   92 eq_neq: eq_neq • TK_OC_LE leq_geq
   93       | eq_neq • TK_OC_GE leq_geq
   94       | eq_neq • '>' leq_geq
   95       | eq_neq • '<' leq_geq

    TK_OC_LE  shift, and go to state 130
    TK_OC_GE  shift, and go to state 131
    '>'       shift, and go to state 132
    '<'       shift, and go to state 133

    $default  reduce using rule 91 (and)


State 63

   97 eq_neq: leq_geq •

    $default  reduce using rule 97 (eq_neq)


State 64

  100 leq_geq: not •

    $default  reduce using rule 100 (leq_geq)


State 65

   26 command: flux_control •
   27        | flux_control • command

    TK_PR_IF          shift, and go to state 22
    TK_PR_WHILE       shift, and go to state 23
    TK_PR_INPUT       shift, and go to state 24
    TK_PR_OUTPUT      shift, and go to state 25
    TK_PR_RETURN      shift, and go to state 26
    TK_PR_STATIC      shift, and go to state 1
    TK_PR_FOR         shift, and go to state 27
    TK_PR_BREAK       shift, and go to state 28
    TK_PR_CONTINUE    shift, and go to state 29
    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '{'               shift, and go to state 17
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    TK_PR_INT     reduce using rule 12 (static)
    TK_PR_FLOAT   reduce using rule 12 (static)
    TK_PR_BOOL    reduce using rule 12 (static)
    TK_PR_CHAR    reduce using rule 12 (static)
    TK_PR_STRING  reduce using rule 12 (static)
    TK_PR_CONST   reduce using rule 12 (static)
    '}'           reduce using rule 26 (command)
    '}'           [reduce using rule 28 (command)]
    '?'           [reduce using rule 70 (bitwise)]
    '&'           [reduce using rule 70 (bitwise)]
    '+'           [reduce using rule 70 (bitwise)]
    '-'           [reduce using rule 70 (bitwise)]
    $default      reduce using rule 70 (bitwise)

    static          go to state 42
    id              go to state 43
    command_block   go to state 44
    command         go to state 134
    simple_command  go to state 46
    local_variable  go to state 47
    attribution     go to state 48
    ternary         go to state 49
    expr            go to state 50
    operand_arit    go to state 51
    operand_log     go to state 52
    arit            go to state 53
    bitwise         go to state 54
    sum_and_sub     go to state 55
    mult_and_div    go to state 56
    exponential     go to state 57
    unary           go to state 58
    log             go to state 59
    or              go to state 60
    and             go to state 61
    eq_neq          go to state 62
    leq_geq         go to state 63
    not             go to state 64
    flux_control    go to state 65
    conditional     go to state 66
    iterative       go to state 67
    input           go to state 68
    output          go to state 69
    return          go to state 70
    break           go to state 71
    continue        go to state 72
    shift           go to state 73
    func_call       go to state 74


State 66

  105 flux_control: conditional •

    $default  reduce using rule 105 (flux_control)


State 67

  106 flux_control: iterative •

    $default  reduce using rule 106 (flux_control)


State 68

   31 simple_command: input •

    $default  reduce using rule 31 (simple_command)


State 69

   32 simple_command: output •

    $default  reduce using rule 32 (simple_command)


State 70

   33 simple_command: return •

    $default  reduce using rule 33 (simple_command)


State 71

   36 simple_command: break •

    $default  reduce using rule 36 (simple_command)


State 72

   37 simple_command: continue •

    $default  reduce using rule 37 (simple_command)


State 73

   35 simple_command: shift •

    $default  reduce using rule 35 (simple_command)


State 74

   39 simple_command: func_call •
   60 operand_arit: func_call •

    ';'       reduce using rule 39 (simple_command)
    $default  reduce using rule 60 (operand_arit)


State 75

    9 vector_declaration: '[' • TK_LIT_INT ']'

    TK_LIT_INT  shift, and go to state 135


State 76

   16 list: '(' • parameters ')'

    TK_PR_CONST  shift, and go to state 107

    ')'       reduce using rule 19 (parameters)
    $default  reduce using rule 21 (const)

    parameters  go to state 136
    const       go to state 137


State 77

    6 global_variable_body: static type id vector_declaration • global_fotter ';'

    ','  shift, and go to state 138

    $default  reduce using rule 8 (global_fotter)

    global_fotter  go to state 139


State 78

   15 func_header: static type id list •

    $default  reduce using rule 15 (func_header)


State 79

  107 conditional: TK_PR_IF '(' • expr ')' command_block
  108            | TK_PR_IF '(' • expr ')' command_block TK_PR_ELSE command_block

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 140
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 80

  110 iterative: TK_PR_WHILE '(' • expr ')' TK_PR_DO command_block

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 141
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 81

  111 input: TK_PR_INPUT id •

    $default  reduce using rule 111 (input)


State 82

   46 literal: TK_LIT_INT •

    $default  reduce using rule 46 (literal)


State 83

   47 literal: TK_LIT_FLOAT •

    $default  reduce using rule 47 (literal)


State 84

   48 literal: TK_LIT_FALSE •

    $default  reduce using rule 48 (literal)


State 85

   49 literal: TK_LIT_TRUE •

    $default  reduce using rule 49 (literal)


State 86

   50 literal: TK_LIT_CHAR •

    $default  reduce using rule 50 (literal)


State 87

   51 literal: TK_LIT_STRING •

    $default  reduce using rule 51 (literal)


State 88

  112 output: TK_PR_OUTPUT id •

    $default  reduce using rule 112 (output)


State 89

  113 output: TK_PR_OUTPUT literal •

    $default  reduce using rule 113 (output)


State 90

   57 operand_arit: id • vector_expr
  119 func_call: id • '(' args ')'
  120          | id • '(' ')'

    '['  shift, and go to state 142
    '('  shift, and go to state 112

    $default  reduce using rule 104 (vector_expr)

    vector_expr  go to state 114


State 91

  114 return: TK_PR_RETURN expr •

    $default  reduce using rule 114 (return)


State 92

   60 operand_arit: func_call •

    $default  reduce using rule 60 (operand_arit)


State 93

  109 iterative: TK_PR_FOR '(' • attribution ':' expr ':' attribution ')' command_block

    TK_IDENTIFICADOR  shift, and go to state 20

    id           go to state 143
    attribution  go to state 144


State 94

   64 arit: arit • '|' bitwise
   65     | arit • '&' bitwise
   83 unary: '(' arit • ')'
   96 eq_neq: arit •

    ')'  shift, and go to state 145
    '|'  shift, and go to state 118
    '&'  shift, and go to state 119

    ')'       [reduce using rule 96 (eq_neq)]
    $default  reduce using rule 96 (eq_neq)


State 95

   85 log: log • TK_OC_OR or
  102 not: '(' log • ')'

    TK_OC_OR  shift, and go to state 126
    ')'       shift, and go to state 146


State 96

  102 not: '(' • log ')'

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 147
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 95
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 97

   61 operand_log: operand_arit •

    $default  reduce using rule 61 (operand_log)


State 98

   98 leq_geq: '?' leq_geq •

    $default  reduce using rule 98 (leq_geq)


State 99

   83 unary: '(' • arit ')'

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 100
    arit          go to state 148
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 100

   84 unary: operand_arit •

    $default  reduce using rule 84 (unary)


State 101

   80 exponential: '&' exponential •

    $default  reduce using rule 80 (exponential)


State 102

   77 exponential: '+' exponential •

    $default  reduce using rule 77 (exponential)


State 103

   78 exponential: '-' exponential •

    $default  reduce using rule 78 (exponential)


State 104

   79 exponential: '*' exponential •

    $default  reduce using rule 79 (exponential)


State 105

   81 exponential: '#' exponential •

    $default  reduce using rule 81 (exponential)


State 106

   99 leq_geq: '!' leq_geq •

    $default  reduce using rule 99 (leq_geq)


State 107

   20 const: TK_PR_CONST •

    $default  reduce using rule 20 (const)


State 108

   40 local_variable: static const • type id_list

    TK_PR_INT     shift, and go to state 11
    TK_PR_FLOAT   shift, and go to state 12
    TK_PR_BOOL    shift, and go to state 13
    TK_PR_CHAR    shift, and go to state 14
    TK_PR_STRING  shift, and go to state 15

    type  go to state 149


State 109

  117 shift: id TK_OC_SL • TK_LIT_INT

    TK_LIT_INT  shift, and go to state 150


State 110

  118 shift: id TK_OC_SR • TK_LIT_INT

    TK_LIT_INT  shift, and go to state 151


State 111

   53 attribution: id '[' • expr ']' '=' expr
  103 vector_expr: '[' • expr ']'

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 152
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 112

  119 func_call: id '(' • args ')'
  120          | id '(' • ')'

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    ')'               shift, and go to state 153
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    ')'       [reduce using rule 70 (bitwise)]
    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 154
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92
    args          go to state 155


State 113

   52 attribution: id '=' • expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 156
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 114

   57 operand_arit: id vector_expr •

    $default  reduce using rule 57 (operand_arit)


State 115

   23 command_block: '{' command '}' •

    $default  reduce using rule 23 (command_block)


State 116

   24 command: simple_command ';' •
   25        | simple_command ';' • command

    TK_PR_IF          shift, and go to state 22
    TK_PR_WHILE       shift, and go to state 23
    TK_PR_INPUT       shift, and go to state 24
    TK_PR_OUTPUT      shift, and go to state 25
    TK_PR_RETURN      shift, and go to state 26
    TK_PR_STATIC      shift, and go to state 1
    TK_PR_FOR         shift, and go to state 27
    TK_PR_BREAK       shift, and go to state 28
    TK_PR_CONTINUE    shift, and go to state 29
    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '{'               shift, and go to state 17
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    TK_PR_INT     reduce using rule 12 (static)
    TK_PR_FLOAT   reduce using rule 12 (static)
    TK_PR_BOOL    reduce using rule 12 (static)
    TK_PR_CHAR    reduce using rule 12 (static)
    TK_PR_STRING  reduce using rule 12 (static)
    TK_PR_CONST   reduce using rule 12 (static)
    '}'           reduce using rule 24 (command)
    '}'           [reduce using rule 28 (command)]
    '?'           [reduce using rule 70 (bitwise)]
    '&'           [reduce using rule 70 (bitwise)]
    '+'           [reduce using rule 70 (bitwise)]
    '-'           [reduce using rule 70 (bitwise)]
    $default      reduce using rule 70 (bitwise)

    static          go to state 42
    id              go to state 43
    command_block   go to state 44
    command         go to state 157
    simple_command  go to state 46
    local_variable  go to state 47
    attribution     go to state 48
    ternary         go to state 49
    expr            go to state 50
    operand_arit    go to state 51
    operand_log     go to state 52
    arit            go to state 53
    bitwise         go to state 54
    sum_and_sub     go to state 55
    mult_and_div    go to state 56
    exponential     go to state 57
    unary           go to state 58
    log             go to state 59
    or              go to state 60
    and             go to state 61
    eq_neq          go to state 62
    leq_geq         go to state 63
    not             go to state 64
    flux_control    go to state 65
    conditional     go to state 66
    iterative       go to state 67
    input           go to state 68
    output          go to state 69
    return          go to state 70
    break           go to state 71
    continue        go to state 72
    shift           go to state 73
    func_call       go to state 74


State 117

   54 ternary: expr '?' • expr ':' expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 158
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 118

   64 arit: arit '|' • bitwise

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 100
    bitwise       go to state 159
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 119

   65 arit: arit '&' • bitwise

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 100
    bitwise       go to state 160
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 120

   67 bitwise: bitwise '+' • sum_and_sub

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    sum_and_sub   go to state 161
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 121

   68 bitwise: bitwise '-' • sum_and_sub

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    sum_and_sub   go to state 162
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 122

   71 sum_and_sub: sum_and_sub '*' • mult_and_div

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    mult_and_div  go to state 163
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 123

   72 sum_and_sub: sum_and_sub '/' • mult_and_div

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    mult_and_div  go to state 164
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 124

   73 sum_and_sub: sum_and_sub '%' • mult_and_div

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    mult_and_div  go to state 165
    exponential   go to state 57
    unary         go to state 58
    func_call     go to state 92


State 125

   75 mult_and_div: mult_and_div '^' • exponential

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 99
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40

    id            go to state 90
    operand_arit  go to state 100
    exponential   go to state 166
    unary         go to state 58
    func_call     go to state 92


State 126

   85 log: log TK_OC_OR • or

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '?'       [reduce using rule 70 (bitwise)]
    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 147
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    or            go to state 167
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 127

   87 or: or TK_OC_AND • and

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '?'       [reduce using rule 70 (bitwise)]
    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 147
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    and           go to state 168
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 128

   89 and: and TK_OC_EQ • eq_neq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '?'       [reduce using rule 70 (bitwise)]
    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 147
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    eq_neq        go to state 169
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 129

   90 and: and TK_OC_NE • eq_neq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '?'       [reduce using rule 70 (bitwise)]
    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 147
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    eq_neq        go to state 170
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 130

   92 eq_neq: eq_neq TK_OC_LE • leq_geq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 96
    '?'               shift, and go to state 35
    '!'               shift, and go to state 41

    id            go to state 90
    operand_arit  go to state 97
    operand_log   go to state 52
    leq_geq       go to state 171
    not           go to state 64
    func_call     go to state 92


State 131

   93 eq_neq: eq_neq TK_OC_GE • leq_geq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 96
    '?'               shift, and go to state 35
    '!'               shift, and go to state 41

    id            go to state 90
    operand_arit  go to state 97
    operand_log   go to state 52
    leq_geq       go to state 172
    not           go to state 64
    func_call     go to state 92


State 132

   94 eq_neq: eq_neq '>' • leq_geq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 96
    '?'               shift, and go to state 35
    '!'               shift, and go to state 41

    id            go to state 90
    operand_arit  go to state 97
    operand_log   go to state 52
    leq_geq       go to state 173
    not           go to state 64
    func_call     go to state 92


State 133

   95 eq_neq: eq_neq '<' • leq_geq

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 96
    '?'               shift, and go to state 35
    '!'               shift, and go to state 41

    id            go to state 90
    operand_arit  go to state 97
    operand_log   go to state 52
    leq_geq       go to state 174
    not           go to state 64
    func_call     go to state 92


State 134

   27 command: flux_control command •

    $default  reduce using rule 27 (command)


State 135

    9 vector_declaration: '[' TK_LIT_INT • ']'

    ']'  shift, and go to state 175


State 136

   16 list: '(' parameters • ')'

    ')'  shift, and go to state 176


State 137

   17 parameters: const • type id ',' parameters
   18           | const • type id

    TK_PR_INT     shift, and go to state 11
    TK_PR_FLOAT   shift, and go to state 12
    TK_PR_BOOL    shift, and go to state 13
    TK_PR_CHAR    shift, and go to state 14
    TK_PR_STRING  shift, and go to state 15

    type  go to state 177


State 138

    7 global_fotter: ',' • id vector_declaration global_fotter

    TK_IDENTIFICADOR  shift, and go to state 20

    id  go to state 178


State 139

    6 global_variable_body: static type id vector_declaration global_fotter • ';'

    ';'  shift, and go to state 179


State 140

  107 conditional: TK_PR_IF '(' expr • ')' command_block
  108            | TK_PR_IF '(' expr • ')' command_block TK_PR_ELSE command_block

    ')'  shift, and go to state 180


State 141

  110 iterative: TK_PR_WHILE '(' expr • ')' TK_PR_DO command_block

    ')'  shift, and go to state 181


State 142

  103 vector_expr: '[' • expr ']'

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 182
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 143

   52 attribution: id • '=' expr
   53            | id • '[' expr ']' '=' expr

    '['  shift, and go to state 183
    '='  shift, and go to state 113


State 144

  109 iterative: TK_PR_FOR '(' attribution • ':' expr ':' attribution ')' command_block

    ':'  shift, and go to state 184


State 145

   83 unary: '(' arit ')' •

    $default  reduce using rule 83 (unary)


State 146

  102 not: '(' log ')' •

    $default  reduce using rule 102 (not)


State 147

   64 arit: arit • '|' bitwise
   65     | arit • '&' bitwise
   96 eq_neq: arit •

    '|'  shift, and go to state 118
    '&'  shift, and go to state 119

    $default  reduce using rule 96 (eq_neq)


State 148

   64 arit: arit • '|' bitwise
   65     | arit • '&' bitwise
   83 unary: '(' arit • ')'

    ')'  shift, and go to state 145
    '|'  shift, and go to state 118
    '&'  shift, and go to state 119


State 149

   40 local_variable: static const type • id_list

    TK_IDENTIFICADOR  shift, and go to state 20

    id       go to state 185
    id_list  go to state 186


State 150

  117 shift: id TK_OC_SL TK_LIT_INT •

    $default  reduce using rule 117 (shift)


State 151

  118 shift: id TK_OC_SR TK_LIT_INT •

    $default  reduce using rule 118 (shift)


State 152

   53 attribution: id '[' expr • ']' '=' expr
  103 vector_expr: '[' expr • ']'

    ']'  shift, and go to state 187


State 153

  120 func_call: id '(' ')' •

    $default  reduce using rule 120 (func_call)


State 154

  121 args: expr •

    $default  reduce using rule 121 (args)


State 155

  119 func_call: id '(' args • ')'
  122 args: args • ',' expr

    ','  shift, and go to state 188
    ')'  shift, and go to state 189


State 156

   52 attribution: id '=' expr •

    $default  reduce using rule 52 (attribution)


State 157

   25 command: simple_command ';' command •

    $default  reduce using rule 25 (command)


State 158

   54 ternary: expr '?' expr • ':' expr

    ':'  shift, and go to state 190


State 159

   64 arit: arit '|' bitwise •
   67 bitwise: bitwise • '+' sum_and_sub
   68        | bitwise • '-' sum_and_sub

    '+'  shift, and go to state 120
    '-'  shift, and go to state 121

    $default  reduce using rule 64 (arit)


State 160

   65 arit: arit '&' bitwise •
   67 bitwise: bitwise • '+' sum_and_sub
   68        | bitwise • '-' sum_and_sub

    '+'  shift, and go to state 120
    '-'  shift, and go to state 121

    $default  reduce using rule 65 (arit)


State 161

   67 bitwise: bitwise '+' sum_and_sub •
   71 sum_and_sub: sum_and_sub • '*' mult_and_div
   72            | sum_and_sub • '/' mult_and_div
   73            | sum_and_sub • '%' mult_and_div

    '*'  shift, and go to state 122
    '/'  shift, and go to state 123
    '%'  shift, and go to state 124

    $default  reduce using rule 67 (bitwise)


State 162

   68 bitwise: bitwise '-' sum_and_sub •
   71 sum_and_sub: sum_and_sub • '*' mult_and_div
   72            | sum_and_sub • '/' mult_and_div
   73            | sum_and_sub • '%' mult_and_div

    '*'  shift, and go to state 122
    '/'  shift, and go to state 123
    '%'  shift, and go to state 124

    $default  reduce using rule 68 (bitwise)


State 163

   71 sum_and_sub: sum_and_sub '*' mult_and_div •
   75 mult_and_div: mult_and_div • '^' exponential

    '^'  shift, and go to state 125

    $default  reduce using rule 71 (sum_and_sub)


State 164

   72 sum_and_sub: sum_and_sub '/' mult_and_div •
   75 mult_and_div: mult_and_div • '^' exponential

    '^'  shift, and go to state 125

    $default  reduce using rule 72 (sum_and_sub)


State 165

   73 sum_and_sub: sum_and_sub '%' mult_and_div •
   75 mult_and_div: mult_and_div • '^' exponential

    '^'  shift, and go to state 125

    $default  reduce using rule 73 (sum_and_sub)


State 166

   75 mult_and_div: mult_and_div '^' exponential •

    $default  reduce using rule 75 (mult_and_div)


State 167

   85 log: log TK_OC_OR or •
   87 or: or • TK_OC_AND and

    TK_OC_AND  shift, and go to state 127

    $default  reduce using rule 85 (log)


State 168

   87 or: or TK_OC_AND and •
   89 and: and • TK_OC_EQ eq_neq
   90    | and • TK_OC_NE eq_neq

    TK_OC_EQ  shift, and go to state 128
    TK_OC_NE  shift, and go to state 129

    $default  reduce using rule 87 (or)


State 169

   89 and: and TK_OC_EQ eq_neq •
   92 eq_neq: eq_neq • TK_OC_LE leq_geq
   93       | eq_neq • TK_OC_GE leq_geq
   94       | eq_neq • '>' leq_geq
   95       | eq_neq • '<' leq_geq

    TK_OC_LE  shift, and go to state 130
    TK_OC_GE  shift, and go to state 131
    '>'       shift, and go to state 132
    '<'       shift, and go to state 133

    $default  reduce using rule 89 (and)


State 170

   90 and: and TK_OC_NE eq_neq •
   92 eq_neq: eq_neq • TK_OC_LE leq_geq
   93       | eq_neq • TK_OC_GE leq_geq
   94       | eq_neq • '>' leq_geq
   95       | eq_neq • '<' leq_geq

    TK_OC_LE  shift, and go to state 130
    TK_OC_GE  shift, and go to state 131
    '>'       shift, and go to state 132
    '<'       shift, and go to state 133

    $default  reduce using rule 90 (and)


State 171

   92 eq_neq: eq_neq TK_OC_LE leq_geq •

    $default  reduce using rule 92 (eq_neq)


State 172

   93 eq_neq: eq_neq TK_OC_GE leq_geq •

    $default  reduce using rule 93 (eq_neq)


State 173

   94 eq_neq: eq_neq '>' leq_geq •

    $default  reduce using rule 94 (eq_neq)


State 174

   95 eq_neq: eq_neq '<' leq_geq •

    $default  reduce using rule 95 (eq_neq)


State 175

    9 vector_declaration: '[' TK_LIT_INT ']' •

    $default  reduce using rule 9 (vector_declaration)


State 176

   16 list: '(' parameters ')' •

    $default  reduce using rule 16 (list)


State 177

   17 parameters: const type • id ',' parameters
   18           | const type • id

    TK_IDENTIFICADOR  shift, and go to state 20

    id  go to state 191


State 178

    7 global_fotter: ',' id • vector_declaration global_fotter

    '['  shift, and go to state 75

    $default  reduce using rule 10 (vector_declaration)

    vector_declaration  go to state 192


State 179

    6 global_variable_body: static type id vector_declaration global_fotter ';' •

    $default  reduce using rule 6 (global_variable_body)


State 180

  107 conditional: TK_PR_IF '(' expr ')' • command_block
  108            | TK_PR_IF '(' expr ')' • command_block TK_PR_ELSE command_block

    '{'  shift, and go to state 17

    command_block  go to state 193


State 181

  110 iterative: TK_PR_WHILE '(' expr ')' • TK_PR_DO command_block

    TK_PR_DO  shift, and go to state 194


State 182

  103 vector_expr: '[' expr • ']'

    ']'  shift, and go to state 195


State 183

   53 attribution: id '[' • expr ']' '=' expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 196
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 184

  109 iterative: TK_PR_FOR '(' attribution ':' • expr ':' attribution ')' command_block

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 197
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 185

   41 id_list: id • initialization
   42        | id • initialization ',' id_list

    TK_OC_LE  shift, and go to state 198

    $default  reduce using rule 45 (initialization)

    initialization  go to state 199


State 186

   40 local_variable: static const type id_list •

    $default  reduce using rule 40 (local_variable)


State 187

   53 attribution: id '[' expr ']' • '=' expr
  103 vector_expr: '[' expr ']' •

    '='  shift, and go to state 200

    $default  reduce using rule 103 (vector_expr)


State 188

  122 args: args ',' • expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 201
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 189

  119 func_call: id '(' args ')' •

    $default  reduce using rule 119 (func_call)


State 190

   54 ternary: expr '?' expr ':' • expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 202
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 191

   17 parameters: const type id • ',' parameters
   18           | const type id •

    ','  shift, and go to state 203

    $default  reduce using rule 18 (parameters)


State 192

    7 global_fotter: ',' id vector_declaration • global_fotter

    ','  shift, and go to state 138

    $default  reduce using rule 8 (global_fotter)

    global_fotter  go to state 204


State 193

  107 conditional: TK_PR_IF '(' expr ')' command_block •
  108            | TK_PR_IF '(' expr ')' command_block • TK_PR_ELSE command_block

    TK_PR_ELSE  shift, and go to state 205

    $default  reduce using rule 107 (conditional)


State 194

  110 iterative: TK_PR_WHILE '(' expr ')' TK_PR_DO • command_block

    '{'  shift, and go to state 17

    command_block  go to state 206


State 195

  103 vector_expr: '[' expr ']' •

    $default  reduce using rule 103 (vector_expr)


State 196

   53 attribution: id '[' expr • ']' '=' expr

    ']'  shift, and go to state 207


State 197

  109 iterative: TK_PR_FOR '(' attribution ':' expr • ':' attribution ')' command_block

    ':'  shift, and go to state 208


State 198

   43 initialization: TK_OC_LE • id
   44               | TK_OC_LE • literal

    TK_LIT_INT        shift, and go to state 82
    TK_LIT_FLOAT      shift, and go to state 83
    TK_LIT_FALSE      shift, and go to state 84
    TK_LIT_TRUE       shift, and go to state 85
    TK_LIT_CHAR       shift, and go to state 86
    TK_LIT_STRING     shift, and go to state 87
    TK_IDENTIFICADOR  shift, and go to state 20

    id       go to state 209
    literal  go to state 210


State 199

   41 id_list: id initialization •
   42        | id initialization • ',' id_list

    ','  shift, and go to state 211

    $default  reduce using rule 41 (id_list)


State 200

   53 attribution: id '[' expr ']' '=' • expr

    TK_LIT_INT        shift, and go to state 30
    TK_LIT_FLOAT      shift, and go to state 31
    TK_LIT_FALSE      shift, and go to state 32
    TK_LIT_TRUE       shift, and go to state 33
    TK_IDENTIFICADOR  shift, and go to state 20
    '('               shift, and go to state 34
    '?'               shift, and go to state 35
    '&'               shift, and go to state 36
    '+'               shift, and go to state 37
    '-'               shift, and go to state 38
    '*'               shift, and go to state 39
    '#'               shift, and go to state 40
    '!'               shift, and go to state 41

    '&'       [reduce using rule 70 (bitwise)]
    '+'       [reduce using rule 70 (bitwise)]
    '-'       [reduce using rule 70 (bitwise)]
    $default  reduce using rule 70 (bitwise)

    id            go to state 90
    expr          go to state 212
    operand_arit  go to state 51
    operand_log   go to state 52
    arit          go to state 53
    bitwise       go to state 54
    sum_and_sub   go to state 55
    mult_and_div  go to state 56
    exponential   go to state 57
    unary         go to state 58
    log           go to state 59
    or            go to state 60
    and           go to state 61
    eq_neq        go to state 62
    leq_geq       go to state 63
    not           go to state 64
    func_call     go to state 92


State 201

  122 args: args ',' expr •

    $default  reduce using rule 122 (args)


State 202

   54 ternary: expr '?' expr ':' expr •

    $default  reduce using rule 54 (ternary)


State 203

   17 parameters: const type id ',' • parameters

    TK_PR_CONST  shift, and go to state 107

    ')'       reduce using rule 19 (parameters)
    $default  reduce using rule 21 (const)

    parameters  go to state 213
    const       go to state 137


State 204

    7 global_fotter: ',' id vector_declaration global_fotter •

    $default  reduce using rule 7 (global_fotter)


State 205

  108 conditional: TK_PR_IF '(' expr ')' command_block TK_PR_ELSE • command_block

    '{'  shift, and go to state 17

    command_block  go to state 214


State 206

  110 iterative: TK_PR_WHILE '(' expr ')' TK_PR_DO command_block •

    $default  reduce using rule 110 (iterative)


State 207

   53 attribution: id '[' expr ']' • '=' expr

    '='  shift, and go to state 200


State 208

  109 iterative: TK_PR_FOR '(' attribution ':' expr ':' • attribution ')' command_block

    TK_IDENTIFICADOR  shift, and go to state 20

    id           go to state 143
    attribution  go to state 215


State 209

   43 initialization: TK_OC_LE id •

    $default  reduce using rule 43 (initialization)


State 210

   44 initialization: TK_OC_LE literal •

    $default  reduce using rule 44 (initialization)


State 211

   42 id_list: id initialization ',' • id_list

    TK_IDENTIFICADOR  shift, and go to state 20

    id       go to state 185
    id_list  go to state 216


State 212

   53 attribution: id '[' expr ']' '=' expr •

    $default  reduce using rule 53 (attribution)


State 213

   17 parameters: const type id ',' parameters •

    $default  reduce using rule 17 (parameters)


State 214

  108 conditional: TK_PR_IF '(' expr ')' command_block TK_PR_ELSE command_block •

    $default  reduce using rule 108 (conditional)


State 215

  109 iterative: TK_PR_FOR '(' attribution ':' expr ':' attribution • ')' command_block

    ')'  shift, and go to state 217


State 216

   42 id_list: id initialization ',' id_list •

    $default  reduce using rule 42 (id_list)


State 217

  109 iterative: TK_PR_FOR '(' attribution ':' expr ':' attribution ')' • command_block

    '{'  shift, and go to state 17

    command_block  go to state 218


State 218

  109 iterative: TK_PR_FOR '(' attribution ':' expr ':' attribution ')' command_block •

    $default  reduce using rule 109 (iterative)
